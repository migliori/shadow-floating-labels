class ShadowFloatingLabels{constructor(e=".floating-labels"){this.selector=e,this.elements=[...document.querySelectorAll(`${e} input, ${e} textarea`)],this.elementShadowContainerMap=new Map,this.init(),this.bindWindowResizeEvent(),this.bindFormRefreshEvent()}init(){this.elements.forEach((e=>{if(""===e.placeholder)return;const t=this.createShadowContainer(e);e.insertAdjacentElement("afterend",t),this.bindEvents(e,t),this.elementShadowContainerMap.set(e,t)}))}createShadowContainer(e){const t=e.parentNode,n=e.getBoundingClientRect(),o=t.getBoundingClientRect(),a=window.getComputedStyle(e),s=getComputedStyle(e,"::placeholder"),i=document.createElement("span");i.attachShadow({mode:"open"}),t.style.position="relative",Object.assign(i.style,{position:"absolute",left:n.left-o.left+"px",top:n.top-o.top+"px",width:`${n.width}px`,height:`${n.height}px`,display:"flex",alignItems:"center",pointerEvents:"none",fontSize:s.fontSize,paddingLeft:a.paddingLeft,color:s.color,zIndex:"1000"});const l=document.createElement("span");return l.textContent=e.placeholder,e.placeholder="",this.applyStylesBasedOnElementValue(e,l,!1),i.shadowRoot.append(l),i}applyStylesBasedOnElementValue(e,t,n){const o=""!==e.value,a=window.getComputedStyle(e),s={position:"absolute",display:"inline-block",left:a.paddingLeft,padding:"0 .2em",marginLeft:"-.2em",background:`linear-gradient(to bottom,  rgba(255,255,255,0) 0%,rgba(255,255,255,0) 40%,${a.backgroundColor} 41%,${a.backgroundColor} 59%,rgba(255,255,255,0) 60%,rgba(255,255,255,0) 100%)`,transition:"all .2s ease-in-out"};if(Object.entries(s).forEach((([e,n])=>t.style[e]=n)),n||o){const n=parseFloat(getComputedStyle(e,"::placeholder").lineHeight);t.style.top=`-${n/2*.8}px`,t.style.opacity="1",t.style.fontSize="0.8em"}else{const n=parseFloat(getComputedStyle(e).height),o="textarea"===e.tagName.toLowerCase()?6:(n-parseFloat(getComputedStyle(e).lineHeight))/2;t.style.top=`${o}px`,t.style.opacity="0.5",t.style.fontSize=getComputedStyle(e,"::placeholder").fontSize}}refresh(){const e=[...document.querySelectorAll(`${this.selector} input, ${this.selector} textarea`)];this.elements.forEach((t=>{if(!e.includes(t)){this.elementShadowContainerMap.get(t)?.remove(),this.elementShadowContainerMap.delete(t)}})),this.elements=e,this.elements.forEach((e=>{if(this.elementShadowContainerMap.has(e)){const t=this.elementShadowContainerMap.get(e);this.applyStylesBasedOnElementValue(e,t.shadowRoot.querySelector("span"),!1)}else{const t=this.createShadowContainer(e);e.insertAdjacentElement("afterend",t),this.bindEvents(e,t),this.elementShadowContainerMap.set(e,t)}}))}refreshFields(e){document.querySelectorAll(e).forEach((e=>{if(this.elements.includes(e)){const t=this.elementShadowContainerMap.get(e);t&&this.applyStylesBasedOnElementValue(e,t.shadowRoot.querySelector("span"),e===document.activeElement)}}))}updateShadowContainerPositions(){this.elementShadowContainerMap.forEach(((e,t)=>{const n=t.getBoundingClientRect(),o=t.parentNode.getBoundingClientRect();Object.assign(e.style,{left:n.left-o.left+"px",top:n.top-o.top+"px",width:`${n.width}px`,height:`${n.height}px`})}))}bindEvents(e,t){e.addEventListener("focus",(()=>this.applyStylesBasedOnElementValue(e,t.shadowRoot.querySelector("span"),!0))),e.addEventListener("blur",(()=>this.applyStylesBasedOnElementValue(e,t.shadowRoot.querySelector("span"),!1)))}bindFormRefreshEvent(){const e=document.querySelector(this.selector)instanceof HTMLFormElement?document.querySelector(this.selector):null;(e?[e]:document.querySelectorAll(`${this.selector} form`)).forEach((e=>{e.querySelector('[type="reset"]')?.addEventListener("click",(()=>setTimeout((()=>this.refresh()),0)))}))}bindWindowResizeEvent(){let e;window.addEventListener("resize",(()=>{clearTimeout(e),e=setTimeout((()=>this.updateShadowContainerPositions()),100)}))}}